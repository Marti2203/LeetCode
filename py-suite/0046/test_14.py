
import solution

import random
import typing
from typing import *
import collections
from collections import *
import functools
from functools import *
import math
from math import *
import string
from string import *
import bisect
import heapq
from heapq import *
import itertools
from itertools import *
import re
from re import *
import operator
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

    def __eq__(self, other):
        if other is None:
            return False
        return self.val == other.val and self.next == other.next

    def __repr__(self):
        return f"ListNode({self.val}, {self.next})"


def test_14():
    assert solution.Solution().permute([30, 14, 10, 16, 20]) == [[30, 14, 10, 16, 20], [30, 14, 10, 20, 16], [30, 14, 16, 10, 20], [30, 14, 16, 20, 10], [30, 14, 20, 10, 16], [30, 14, 20, 16, 10], [30, 10, 14, 16, 20], [30, 10, 14, 20, 16], [30, 10, 16, 14, 20], [30, 10, 16, 20, 14], [30, 10, 20, 14, 16], [30, 10, 20, 16, 14], [30, 16, 14, 10, 20], [30, 16, 14, 20, 10], [30, 16, 10, 14, 20], [30, 16, 10, 20, 14], [30, 16, 20, 14, 10], [30, 16, 20, 10, 14], [30, 20, 14, 10, 16], [30, 20, 14, 16, 10], [30, 20, 10, 14, 16], [30, 20, 10, 16, 14], [30, 20, 16, 14, 10], [30, 20, 16, 10, 14], [14, 30, 10, 16, 20], [14, 30, 10, 20, 16], [14, 30, 16, 10, 20], [14, 30, 16, 20, 10], [14, 30, 20, 10, 16], [14, 30, 20, 16, 10], [14, 10, 30, 16, 20], [14, 10, 30, 20, 16], [14, 10, 16, 30, 20], [14, 10, 16, 20, 30], [14, 10, 20, 30, 16], [14, 10, 20, 16, 30], [14, 16, 30, 10, 20], [14, 16, 30, 20, 10], [14, 16, 10, 30, 20], [14, 16, 10, 20, 30], [14, 16, 20, 30, 10], [14, 16, 20, 10, 30], [14, 20, 30, 10, 16], [14, 20, 30, 16, 10], [14, 20, 10, 30, 16], [14, 20, 10, 16, 30], [14, 20, 16, 30, 10], [14, 20, 16, 10, 30], [10, 30, 14, 16, 20], [10, 30, 14, 20, 16], [10, 30, 16, 14, 20], [10, 30, 16, 20, 14], [10, 30, 20, 14, 16], [10, 30, 20, 16, 14], [10, 14, 30, 16, 20], [10, 14, 30, 20, 16], [10, 14, 16, 30, 20], [10, 14, 16, 20, 30], [10, 14, 20, 30, 16], [10, 14, 20, 16, 30], [10, 16, 30, 14, 20], [10, 16, 30, 20, 14], [10, 16, 14, 30, 20], [10, 16, 14, 20, 30], [10, 16, 20, 30, 14], [10, 16, 20, 14, 30], [10, 20, 30, 14, 16], [10, 20, 30, 16, 14], [10, 20, 14, 30, 16], [10, 20, 14, 16, 30], [10, 20, 16, 30, 14], [10, 20, 16, 14, 30], [16, 30, 14, 10, 20], [16, 30, 14, 20, 10], [16, 30, 10, 14, 20], [16, 30, 10, 20, 14], [16, 30, 20, 14, 10], [16, 30, 20, 10, 14], [16, 14, 30, 10, 20], [16, 14, 30, 20, 10], [16, 14, 10, 30, 20], [16, 14, 10, 20, 30], [16, 14, 20, 30, 10], [16, 14, 20, 10, 30], [16, 10, 30, 14, 20], [16, 10, 30, 20, 14], [16, 10, 14, 30, 20], [16, 10, 14, 20, 30], [16, 10, 20, 30, 14], [16, 10, 20, 14, 30], [16, 20, 30, 14, 10], [16, 20, 30, 10, 14], [16, 20, 14, 30, 10], [16, 20, 14, 10, 30], [16, 20, 10, 30, 14], [16, 20, 10, 14, 30], [20, 30, 14, 10, 16], [20, 30, 14, 16, 10], [20, 30, 10, 14, 16], [20, 30, 10, 16, 14], [20, 30, 16, 14, 10], [20, 30, 16, 10, 14], [20, 14, 30, 10, 16], [20, 14, 30, 16, 10], [20, 14, 10, 30, 16], [20, 14, 10, 16, 30], [20, 14, 16, 30, 10], [20, 14, 16, 10, 30], [20, 10, 30, 14, 16], [20, 10, 30, 16, 14], [20, 10, 14, 30, 16], [20, 10, 14, 16, 30], [20, 10, 16, 30, 14], [20, 10, 16, 14, 30], [20, 16, 30, 14, 10], [20, 16, 30, 10, 14], [20, 16, 14, 30, 10], [20, 16, 14, 10, 30], [20, 16, 10, 30, 14], [20, 16, 10, 14, 30]]
