
import solution

import random
import typing
from typing import *
import collections
from collections import *
import functools
from functools import *
import math
from math import *
import string
from string import *
import bisect
import heapq
from heapq import *
import itertools
from itertools import *
import re
from re import *
import operator
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

    def __eq__(self, other):
        if other is None:
            return False
        return self.val == other.val and self.next == other.next

    def __repr__(self):
        return f"ListNode({self.val}, {self.next})"


def test_1():
    assert solution.Solution().permute([20, 96, 86, 42, 39]) == [[20, 96, 86, 42, 39], [20, 96, 86, 39, 42], [20, 96, 42, 86, 39], [20, 96, 42, 39, 86], [20, 96, 39, 86, 42], [20, 96, 39, 42, 86], [20, 86, 96, 42, 39], [20, 86, 96, 39, 42], [20, 86, 42, 96, 39], [20, 86, 42, 39, 96], [20, 86, 39, 96, 42], [20, 86, 39, 42, 96], [20, 42, 96, 86, 39], [20, 42, 96, 39, 86], [20, 42, 86, 96, 39], [20, 42, 86, 39, 96], [20, 42, 39, 96, 86], [20, 42, 39, 86, 96], [20, 39, 96, 86, 42], [20, 39, 96, 42, 86], [20, 39, 86, 96, 42], [20, 39, 86, 42, 96], [20, 39, 42, 96, 86], [20, 39, 42, 86, 96], [96, 20, 86, 42, 39], [96, 20, 86, 39, 42], [96, 20, 42, 86, 39], [96, 20, 42, 39, 86], [96, 20, 39, 86, 42], [96, 20, 39, 42, 86], [96, 86, 20, 42, 39], [96, 86, 20, 39, 42], [96, 86, 42, 20, 39], [96, 86, 42, 39, 20], [96, 86, 39, 20, 42], [96, 86, 39, 42, 20], [96, 42, 20, 86, 39], [96, 42, 20, 39, 86], [96, 42, 86, 20, 39], [96, 42, 86, 39, 20], [96, 42, 39, 20, 86], [96, 42, 39, 86, 20], [96, 39, 20, 86, 42], [96, 39, 20, 42, 86], [96, 39, 86, 20, 42], [96, 39, 86, 42, 20], [96, 39, 42, 20, 86], [96, 39, 42, 86, 20], [86, 20, 96, 42, 39], [86, 20, 96, 39, 42], [86, 20, 42, 96, 39], [86, 20, 42, 39, 96], [86, 20, 39, 96, 42], [86, 20, 39, 42, 96], [86, 96, 20, 42, 39], [86, 96, 20, 39, 42], [86, 96, 42, 20, 39], [86, 96, 42, 39, 20], [86, 96, 39, 20, 42], [86, 96, 39, 42, 20], [86, 42, 20, 96, 39], [86, 42, 20, 39, 96], [86, 42, 96, 20, 39], [86, 42, 96, 39, 20], [86, 42, 39, 20, 96], [86, 42, 39, 96, 20], [86, 39, 20, 96, 42], [86, 39, 20, 42, 96], [86, 39, 96, 20, 42], [86, 39, 96, 42, 20], [86, 39, 42, 20, 96], [86, 39, 42, 96, 20], [42, 20, 96, 86, 39], [42, 20, 96, 39, 86], [42, 20, 86, 96, 39], [42, 20, 86, 39, 96], [42, 20, 39, 96, 86], [42, 20, 39, 86, 96], [42, 96, 20, 86, 39], [42, 96, 20, 39, 86], [42, 96, 86, 20, 39], [42, 96, 86, 39, 20], [42, 96, 39, 20, 86], [42, 96, 39, 86, 20], [42, 86, 20, 96, 39], [42, 86, 20, 39, 96], [42, 86, 96, 20, 39], [42, 86, 96, 39, 20], [42, 86, 39, 20, 96], [42, 86, 39, 96, 20], [42, 39, 20, 96, 86], [42, 39, 20, 86, 96], [42, 39, 96, 20, 86], [42, 39, 96, 86, 20], [42, 39, 86, 20, 96], [42, 39, 86, 96, 20], [39, 20, 96, 86, 42], [39, 20, 96, 42, 86], [39, 20, 86, 96, 42], [39, 20, 86, 42, 96], [39, 20, 42, 96, 86], [39, 20, 42, 86, 96], [39, 96, 20, 86, 42], [39, 96, 20, 42, 86], [39, 96, 86, 20, 42], [39, 96, 86, 42, 20], [39, 96, 42, 20, 86], [39, 96, 42, 86, 20], [39, 86, 20, 96, 42], [39, 86, 20, 42, 96], [39, 86, 96, 20, 42], [39, 86, 96, 42, 20], [39, 86, 42, 20, 96], [39, 86, 42, 96, 20], [39, 42, 20, 96, 86], [39, 42, 20, 86, 96], [39, 42, 96, 20, 86], [39, 42, 96, 86, 20], [39, 42, 86, 20, 96], [39, 42, 86, 96, 20]]
