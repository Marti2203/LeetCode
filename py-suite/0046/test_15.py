
import solution

import random
import typing
from typing import *
import collections
from collections import *
import functools
from functools import *
import math
from math import *
import string
from string import *
import bisect
import heapq
from heapq import *
import itertools
from itertools import *
import re
from re import *
import operator
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

    def __eq__(self, other):
        if other is None:
            return False
        return self.val == other.val and self.next == other.next

    def __repr__(self):
        return f"ListNode({self.val}, {self.next})"


def test_15():
    assert solution.Solution().permute([7, 64, 81, 86, 34]) == [[7, 64, 81, 86, 34], [7, 64, 81, 34, 86], [7, 64, 86, 81, 34], [7, 64, 86, 34, 81], [7, 64, 34, 81, 86], [7, 64, 34, 86, 81], [7, 81, 64, 86, 34], [7, 81, 64, 34, 86], [7, 81, 86, 64, 34], [7, 81, 86, 34, 64], [7, 81, 34, 64, 86], [7, 81, 34, 86, 64], [7, 86, 64, 81, 34], [7, 86, 64, 34, 81], [7, 86, 81, 64, 34], [7, 86, 81, 34, 64], [7, 86, 34, 64, 81], [7, 86, 34, 81, 64], [7, 34, 64, 81, 86], [7, 34, 64, 86, 81], [7, 34, 81, 64, 86], [7, 34, 81, 86, 64], [7, 34, 86, 64, 81], [7, 34, 86, 81, 64], [64, 7, 81, 86, 34], [64, 7, 81, 34, 86], [64, 7, 86, 81, 34], [64, 7, 86, 34, 81], [64, 7, 34, 81, 86], [64, 7, 34, 86, 81], [64, 81, 7, 86, 34], [64, 81, 7, 34, 86], [64, 81, 86, 7, 34], [64, 81, 86, 34, 7], [64, 81, 34, 7, 86], [64, 81, 34, 86, 7], [64, 86, 7, 81, 34], [64, 86, 7, 34, 81], [64, 86, 81, 7, 34], [64, 86, 81, 34, 7], [64, 86, 34, 7, 81], [64, 86, 34, 81, 7], [64, 34, 7, 81, 86], [64, 34, 7, 86, 81], [64, 34, 81, 7, 86], [64, 34, 81, 86, 7], [64, 34, 86, 7, 81], [64, 34, 86, 81, 7], [81, 7, 64, 86, 34], [81, 7, 64, 34, 86], [81, 7, 86, 64, 34], [81, 7, 86, 34, 64], [81, 7, 34, 64, 86], [81, 7, 34, 86, 64], [81, 64, 7, 86, 34], [81, 64, 7, 34, 86], [81, 64, 86, 7, 34], [81, 64, 86, 34, 7], [81, 64, 34, 7, 86], [81, 64, 34, 86, 7], [81, 86, 7, 64, 34], [81, 86, 7, 34, 64], [81, 86, 64, 7, 34], [81, 86, 64, 34, 7], [81, 86, 34, 7, 64], [81, 86, 34, 64, 7], [81, 34, 7, 64, 86], [81, 34, 7, 86, 64], [81, 34, 64, 7, 86], [81, 34, 64, 86, 7], [81, 34, 86, 7, 64], [81, 34, 86, 64, 7], [86, 7, 64, 81, 34], [86, 7, 64, 34, 81], [86, 7, 81, 64, 34], [86, 7, 81, 34, 64], [86, 7, 34, 64, 81], [86, 7, 34, 81, 64], [86, 64, 7, 81, 34], [86, 64, 7, 34, 81], [86, 64, 81, 7, 34], [86, 64, 81, 34, 7], [86, 64, 34, 7, 81], [86, 64, 34, 81, 7], [86, 81, 7, 64, 34], [86, 81, 7, 34, 64], [86, 81, 64, 7, 34], [86, 81, 64, 34, 7], [86, 81, 34, 7, 64], [86, 81, 34, 64, 7], [86, 34, 7, 64, 81], [86, 34, 7, 81, 64], [86, 34, 64, 7, 81], [86, 34, 64, 81, 7], [86, 34, 81, 7, 64], [86, 34, 81, 64, 7], [34, 7, 64, 81, 86], [34, 7, 64, 86, 81], [34, 7, 81, 64, 86], [34, 7, 81, 86, 64], [34, 7, 86, 64, 81], [34, 7, 86, 81, 64], [34, 64, 7, 81, 86], [34, 64, 7, 86, 81], [34, 64, 81, 7, 86], [34, 64, 81, 86, 7], [34, 64, 86, 7, 81], [34, 64, 86, 81, 7], [34, 81, 7, 64, 86], [34, 81, 7, 86, 64], [34, 81, 64, 7, 86], [34, 81, 64, 86, 7], [34, 81, 86, 7, 64], [34, 81, 86, 64, 7], [34, 86, 7, 64, 81], [34, 86, 7, 81, 64], [34, 86, 64, 7, 81], [34, 86, 64, 81, 7], [34, 86, 81, 7, 64], [34, 86, 81, 64, 7]]
