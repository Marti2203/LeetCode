
import solution

import random
import typing
from typing import *
import collections
from collections import *
import functools
from functools import *
import math
from math import *
import string
from string import *
import bisect
import heapq
from heapq import *
import itertools
from itertools import *
import re
from re import *
import operator
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

    def __eq__(self, other):
        if other is None:
            return False
        return self.val == other.val and self.next == other.next

    def __repr__(self):
        return f"ListNode({self.val}, {self.next})"


def test_15():
    assert solution.Solution().permuteUnique([100, 64, 95, 74, 55]) == [[55, 64, 74, 95, 100], [55, 64, 74, 100, 95], [55, 64, 95, 74, 100], [55, 64, 95, 100, 74], [55, 64, 100, 74, 95], [55, 64, 100, 95, 74], [55, 74, 64, 95, 100], [55, 74, 64, 100, 95], [55, 74, 95, 64, 100], [55, 74, 95, 100, 64], [55, 74, 100, 64, 95], [55, 74, 100, 95, 64], [55, 95, 64, 74, 100], [55, 95, 64, 100, 74], [55, 95, 74, 64, 100], [55, 95, 74, 100, 64], [55, 95, 100, 64, 74], [55, 95, 100, 74, 64], [55, 100, 64, 74, 95], [55, 100, 64, 95, 74], [55, 100, 74, 64, 95], [55, 100, 74, 95, 64], [55, 100, 95, 64, 74], [55, 100, 95, 74, 64], [64, 55, 74, 95, 100], [64, 55, 74, 100, 95], [64, 55, 95, 74, 100], [64, 55, 95, 100, 74], [64, 55, 100, 74, 95], [64, 55, 100, 95, 74], [64, 74, 55, 95, 100], [64, 74, 55, 100, 95], [64, 74, 95, 55, 100], [64, 74, 95, 100, 55], [64, 74, 100, 55, 95], [64, 74, 100, 95, 55], [64, 95, 55, 74, 100], [64, 95, 55, 100, 74], [64, 95, 74, 55, 100], [64, 95, 74, 100, 55], [64, 95, 100, 55, 74], [64, 95, 100, 74, 55], [64, 100, 55, 74, 95], [64, 100, 55, 95, 74], [64, 100, 74, 55, 95], [64, 100, 74, 95, 55], [64, 100, 95, 55, 74], [64, 100, 95, 74, 55], [74, 55, 64, 95, 100], [74, 55, 64, 100, 95], [74, 55, 95, 64, 100], [74, 55, 95, 100, 64], [74, 55, 100, 64, 95], [74, 55, 100, 95, 64], [74, 64, 55, 95, 100], [74, 64, 55, 100, 95], [74, 64, 95, 55, 100], [74, 64, 95, 100, 55], [74, 64, 100, 55, 95], [74, 64, 100, 95, 55], [74, 95, 55, 64, 100], [74, 95, 55, 100, 64], [74, 95, 64, 55, 100], [74, 95, 64, 100, 55], [74, 95, 100, 55, 64], [74, 95, 100, 64, 55], [74, 100, 55, 64, 95], [74, 100, 55, 95, 64], [74, 100, 64, 55, 95], [74, 100, 64, 95, 55], [74, 100, 95, 55, 64], [74, 100, 95, 64, 55], [95, 55, 64, 74, 100], [95, 55, 64, 100, 74], [95, 55, 74, 64, 100], [95, 55, 74, 100, 64], [95, 55, 100, 64, 74], [95, 55, 100, 74, 64], [95, 64, 55, 74, 100], [95, 64, 55, 100, 74], [95, 64, 74, 55, 100], [95, 64, 74, 100, 55], [95, 64, 100, 55, 74], [95, 64, 100, 74, 55], [95, 74, 55, 64, 100], [95, 74, 55, 100, 64], [95, 74, 64, 55, 100], [95, 74, 64, 100, 55], [95, 74, 100, 55, 64], [95, 74, 100, 64, 55], [95, 100, 55, 64, 74], [95, 100, 55, 74, 64], [95, 100, 64, 55, 74], [95, 100, 64, 74, 55], [95, 100, 74, 55, 64], [95, 100, 74, 64, 55], [100, 55, 64, 74, 95], [100, 55, 64, 95, 74], [100, 55, 74, 64, 95], [100, 55, 74, 95, 64], [100, 55, 95, 64, 74], [100, 55, 95, 74, 64], [100, 64, 55, 74, 95], [100, 64, 55, 95, 74], [100, 64, 74, 55, 95], [100, 64, 74, 95, 55], [100, 64, 95, 55, 74], [100, 64, 95, 74, 55], [100, 74, 55, 64, 95], [100, 74, 55, 95, 64], [100, 74, 64, 55, 95], [100, 74, 64, 95, 55], [100, 74, 95, 55, 64], [100, 74, 95, 64, 55], [100, 95, 55, 64, 74], [100, 95, 55, 74, 64], [100, 95, 64, 55, 74], [100, 95, 64, 74, 55], [100, 95, 74, 55, 64], [100, 95, 74, 64, 55]]
