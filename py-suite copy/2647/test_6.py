
import solution

import random
import typing
from typing import *
import collections
from collections import *
import functools
from functools import *
import math
from math import *
import string
from string import *
import bisect
import heapq
from heapq import *
import itertools
from itertools import *
import re
from re import *
import operator
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

    def __eq__(self, other):
        if other is None:
            return False
        return self.val == other.val and self.next == other.next

    def __repr__(self):
        return f"ListNode({self.val}, {self.next})"


def test_6():
    assert solution.Solution().colorRed(23) == [[1, 1], [2, 1], [2, 3], [3, 1], [3, 5], [4, 1], [5, 3], [5, 5], [5, 7], [5, 9], [6, 2], [7, 1], [7, 3], [7, 5], [7, 7], [7, 9], [7, 11], [7, 13], [8, 1], [9, 3], [9, 5], [9, 7], [9, 9], [9, 11], [9, 13], [9, 15], [9, 17], [10, 2], [11, 1], [11, 3], [11, 5], [11, 7], [11, 9], [11, 11], [11, 13], [11, 15], [11, 17], [11, 19], [11, 21], [12, 1], [13, 3], [13, 5], [13, 7], [13, 9], [13, 11], [13, 13], [13, 15], [13, 17], [13, 19], [13, 21], [13, 23], [13, 25], [14, 2], [15, 1], [15, 3], [15, 5], [15, 7], [15, 9], [15, 11], [15, 13], [15, 15], [15, 17], [15, 19], [15, 21], [15, 23], [15, 25], [15, 27], [15, 29], [16, 1], [17, 3], [17, 5], [17, 7], [17, 9], [17, 11], [17, 13], [17, 15], [17, 17], [17, 19], [17, 21], [17, 23], [17, 25], [17, 27], [17, 29], [17, 31], [17, 33], [18, 2], [19, 1], [19, 3], [19, 5], [19, 7], [19, 9], [19, 11], [19, 13], [19, 15], [19, 17], [19, 19], [19, 21], [19, 23], [19, 25], [19, 27], [19, 29], [19, 31], [19, 33], [19, 35], [19, 37], [20, 1], [21, 3], [21, 5], [21, 7], [21, 9], [21, 11], [21, 13], [21, 15], [21, 17], [21, 19], [21, 21], [21, 23], [21, 25], [21, 27], [21, 29], [21, 31], [21, 33], [21, 35], [21, 37], [21, 39], [21, 41], [22, 2], [23, 1], [23, 3], [23, 5], [23, 7], [23, 9], [23, 11], [23, 13], [23, 15], [23, 17], [23, 19], [23, 21], [23, 23], [23, 25], [23, 27], [23, 29], [23, 31], [23, 33], [23, 35], [23, 37], [23, 39], [23, 41], [23, 43], [23, 45]]
