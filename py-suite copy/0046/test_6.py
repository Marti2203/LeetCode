
import solution

import random
import typing
from typing import *
import collections
from collections import *
import functools
from functools import *
import math
from math import *
import string
from string import *
import bisect
import heapq
from heapq import *
import itertools
from itertools import *
import re
from re import *
import operator
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

    def __eq__(self, other):
        if other is None:
            return False
        return self.val == other.val and self.next == other.next

    def __repr__(self):
        return f"ListNode({self.val}, {self.next})"


def test_6():
    assert solution.Solution().permute([6, 34, 78, 52, 71]) == [[6, 34, 78, 52, 71], [6, 34, 78, 71, 52], [6, 34, 52, 78, 71], [6, 34, 52, 71, 78], [6, 34, 71, 78, 52], [6, 34, 71, 52, 78], [6, 78, 34, 52, 71], [6, 78, 34, 71, 52], [6, 78, 52, 34, 71], [6, 78, 52, 71, 34], [6, 78, 71, 34, 52], [6, 78, 71, 52, 34], [6, 52, 34, 78, 71], [6, 52, 34, 71, 78], [6, 52, 78, 34, 71], [6, 52, 78, 71, 34], [6, 52, 71, 34, 78], [6, 52, 71, 78, 34], [6, 71, 34, 78, 52], [6, 71, 34, 52, 78], [6, 71, 78, 34, 52], [6, 71, 78, 52, 34], [6, 71, 52, 34, 78], [6, 71, 52, 78, 34], [34, 6, 78, 52, 71], [34, 6, 78, 71, 52], [34, 6, 52, 78, 71], [34, 6, 52, 71, 78], [34, 6, 71, 78, 52], [34, 6, 71, 52, 78], [34, 78, 6, 52, 71], [34, 78, 6, 71, 52], [34, 78, 52, 6, 71], [34, 78, 52, 71, 6], [34, 78, 71, 6, 52], [34, 78, 71, 52, 6], [34, 52, 6, 78, 71], [34, 52, 6, 71, 78], [34, 52, 78, 6, 71], [34, 52, 78, 71, 6], [34, 52, 71, 6, 78], [34, 52, 71, 78, 6], [34, 71, 6, 78, 52], [34, 71, 6, 52, 78], [34, 71, 78, 6, 52], [34, 71, 78, 52, 6], [34, 71, 52, 6, 78], [34, 71, 52, 78, 6], [78, 6, 34, 52, 71], [78, 6, 34, 71, 52], [78, 6, 52, 34, 71], [78, 6, 52, 71, 34], [78, 6, 71, 34, 52], [78, 6, 71, 52, 34], [78, 34, 6, 52, 71], [78, 34, 6, 71, 52], [78, 34, 52, 6, 71], [78, 34, 52, 71, 6], [78, 34, 71, 6, 52], [78, 34, 71, 52, 6], [78, 52, 6, 34, 71], [78, 52, 6, 71, 34], [78, 52, 34, 6, 71], [78, 52, 34, 71, 6], [78, 52, 71, 6, 34], [78, 52, 71, 34, 6], [78, 71, 6, 34, 52], [78, 71, 6, 52, 34], [78, 71, 34, 6, 52], [78, 71, 34, 52, 6], [78, 71, 52, 6, 34], [78, 71, 52, 34, 6], [52, 6, 34, 78, 71], [52, 6, 34, 71, 78], [52, 6, 78, 34, 71], [52, 6, 78, 71, 34], [52, 6, 71, 34, 78], [52, 6, 71, 78, 34], [52, 34, 6, 78, 71], [52, 34, 6, 71, 78], [52, 34, 78, 6, 71], [52, 34, 78, 71, 6], [52, 34, 71, 6, 78], [52, 34, 71, 78, 6], [52, 78, 6, 34, 71], [52, 78, 6, 71, 34], [52, 78, 34, 6, 71], [52, 78, 34, 71, 6], [52, 78, 71, 6, 34], [52, 78, 71, 34, 6], [52, 71, 6, 34, 78], [52, 71, 6, 78, 34], [52, 71, 34, 6, 78], [52, 71, 34, 78, 6], [52, 71, 78, 6, 34], [52, 71, 78, 34, 6], [71, 6, 34, 78, 52], [71, 6, 34, 52, 78], [71, 6, 78, 34, 52], [71, 6, 78, 52, 34], [71, 6, 52, 34, 78], [71, 6, 52, 78, 34], [71, 34, 6, 78, 52], [71, 34, 6, 52, 78], [71, 34, 78, 6, 52], [71, 34, 78, 52, 6], [71, 34, 52, 6, 78], [71, 34, 52, 78, 6], [71, 78, 6, 34, 52], [71, 78, 6, 52, 34], [71, 78, 34, 6, 52], [71, 78, 34, 52, 6], [71, 78, 52, 6, 34], [71, 78, 52, 34, 6], [71, 52, 6, 34, 78], [71, 52, 6, 78, 34], [71, 52, 34, 6, 78], [71, 52, 34, 78, 6], [71, 52, 78, 6, 34], [71, 52, 78, 34, 6]]
