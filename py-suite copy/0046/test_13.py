
import solution

import random
import typing
from typing import *
import collections
from collections import *
import functools
from functools import *
import math
from math import *
import string
from string import *
import bisect
import heapq
from heapq import *
import itertools
from itertools import *
import re
from re import *
import operator
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

    def __eq__(self, other):
        if other is None:
            return False
        return self.val == other.val and self.next == other.next

    def __repr__(self):
        return f"ListNode({self.val}, {self.next})"


def test_13():
    assert solution.Solution().permute([15, 29, 2, 72, 19]) == [[15, 29, 2, 72, 19], [15, 29, 2, 19, 72], [15, 29, 72, 2, 19], [15, 29, 72, 19, 2], [15, 29, 19, 2, 72], [15, 29, 19, 72, 2], [15, 2, 29, 72, 19], [15, 2, 29, 19, 72], [15, 2, 72, 29, 19], [15, 2, 72, 19, 29], [15, 2, 19, 29, 72], [15, 2, 19, 72, 29], [15, 72, 29, 2, 19], [15, 72, 29, 19, 2], [15, 72, 2, 29, 19], [15, 72, 2, 19, 29], [15, 72, 19, 29, 2], [15, 72, 19, 2, 29], [15, 19, 29, 2, 72], [15, 19, 29, 72, 2], [15, 19, 2, 29, 72], [15, 19, 2, 72, 29], [15, 19, 72, 29, 2], [15, 19, 72, 2, 29], [29, 15, 2, 72, 19], [29, 15, 2, 19, 72], [29, 15, 72, 2, 19], [29, 15, 72, 19, 2], [29, 15, 19, 2, 72], [29, 15, 19, 72, 2], [29, 2, 15, 72, 19], [29, 2, 15, 19, 72], [29, 2, 72, 15, 19], [29, 2, 72, 19, 15], [29, 2, 19, 15, 72], [29, 2, 19, 72, 15], [29, 72, 15, 2, 19], [29, 72, 15, 19, 2], [29, 72, 2, 15, 19], [29, 72, 2, 19, 15], [29, 72, 19, 15, 2], [29, 72, 19, 2, 15], [29, 19, 15, 2, 72], [29, 19, 15, 72, 2], [29, 19, 2, 15, 72], [29, 19, 2, 72, 15], [29, 19, 72, 15, 2], [29, 19, 72, 2, 15], [2, 15, 29, 72, 19], [2, 15, 29, 19, 72], [2, 15, 72, 29, 19], [2, 15, 72, 19, 29], [2, 15, 19, 29, 72], [2, 15, 19, 72, 29], [2, 29, 15, 72, 19], [2, 29, 15, 19, 72], [2, 29, 72, 15, 19], [2, 29, 72, 19, 15], [2, 29, 19, 15, 72], [2, 29, 19, 72, 15], [2, 72, 15, 29, 19], [2, 72, 15, 19, 29], [2, 72, 29, 15, 19], [2, 72, 29, 19, 15], [2, 72, 19, 15, 29], [2, 72, 19, 29, 15], [2, 19, 15, 29, 72], [2, 19, 15, 72, 29], [2, 19, 29, 15, 72], [2, 19, 29, 72, 15], [2, 19, 72, 15, 29], [2, 19, 72, 29, 15], [72, 15, 29, 2, 19], [72, 15, 29, 19, 2], [72, 15, 2, 29, 19], [72, 15, 2, 19, 29], [72, 15, 19, 29, 2], [72, 15, 19, 2, 29], [72, 29, 15, 2, 19], [72, 29, 15, 19, 2], [72, 29, 2, 15, 19], [72, 29, 2, 19, 15], [72, 29, 19, 15, 2], [72, 29, 19, 2, 15], [72, 2, 15, 29, 19], [72, 2, 15, 19, 29], [72, 2, 29, 15, 19], [72, 2, 29, 19, 15], [72, 2, 19, 15, 29], [72, 2, 19, 29, 15], [72, 19, 15, 29, 2], [72, 19, 15, 2, 29], [72, 19, 29, 15, 2], [72, 19, 29, 2, 15], [72, 19, 2, 15, 29], [72, 19, 2, 29, 15], [19, 15, 29, 2, 72], [19, 15, 29, 72, 2], [19, 15, 2, 29, 72], [19, 15, 2, 72, 29], [19, 15, 72, 29, 2], [19, 15, 72, 2, 29], [19, 29, 15, 2, 72], [19, 29, 15, 72, 2], [19, 29, 2, 15, 72], [19, 29, 2, 72, 15], [19, 29, 72, 15, 2], [19, 29, 72, 2, 15], [19, 2, 15, 29, 72], [19, 2, 15, 72, 29], [19, 2, 29, 15, 72], [19, 2, 29, 72, 15], [19, 2, 72, 15, 29], [19, 2, 72, 29, 15], [19, 72, 15, 29, 2], [19, 72, 15, 2, 29], [19, 72, 29, 15, 2], [19, 72, 29, 2, 15], [19, 72, 2, 15, 29], [19, 72, 2, 29, 15]]
